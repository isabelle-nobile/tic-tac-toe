import random
from utils import check_winner
from main import check_tie

class TicTacToeAI:
    def __init__(self, ai_sign):
        self.ai_sign = ai_sign
        self.human_sign = 'O' if ai_sign == 'X' else 'X'

    def get_empty_cells(self, board):
        empty_cells = []
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    empty_cells.append((i, j))
        return empty_cells

    def get_move(self, board):
        empty_cells = self.get_empty_cells(board)
        if empty_cells:
            return random.choice(empty_cells)
        else:
            return False

    def minimax(self, board, sign):
        if check_winner(board, self.human_sign):
            return -1
        elif check_winner(board, self.ai_sign):
            return 1
        elif check_tie(board):
            return 0

        scores = []
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = sign
                    scores.append(self.minimax(board, self.human_sign if sign == self.ai_sign else self.ai_sign))
                    board[i][j] = ' '

        if sign == self.ai_sign:
            return max(scores)
        else:
            return min(scores)

    def get_best_move(self, board):
        best_score = float('-inf')
        best_move = None
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = self.ai_sign
                    score = self.minimax(board, self.human_sign)
                    board[i][j] = ' '
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)
        return best_move

class TicTacToeGame:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Tic Tac Toe")
        self.canvas = tk.Canvas(self.root, width=WIDTH, height=HEIGHT, bg=BG_COLOR)
        self.canvas.pack()
        self.draw_lines()
        self.canvas.bind("<Button-1>", self.click_handler)
        self.board = [[EMPTY for _ in range(COLS)] for _ in range(ROWS)]
        self.current_player = CROSS
        self.game_over = False
        self.ai_player = None
        self.ai_difficulty = 2  # Default difficulty is "hard".
        self.root.iconbitmap('icon_tic_tac_toe.ico')

        # Create a menu bar.
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        # Create a "Game" menu.
        game_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Game", menu=game_menu)
        game_menu.add_command(label="Restart game", command=self.reset_game)
        game_menu.add_command(label="Play vs Player", command=self.start_pvp)
        game_menu.add_command(label="Play vs AI", command=self.start_pvai)
        game_menu.add_command(label="Select difficulty", command=self.select_difficulty)

    def select_difficulty(self):
        # Show a dialog box with difficulty options.
        options = [
            ("Easy", 1),
            ("Hard", 2)
        ]
        var = tk.StringVar()
        var.set(str(self.ai_difficulty))
        for text, value in options:
            tk.Radiobutton(self.root, text=text
